@use 'sass:map';
@use 'sass:math';

@use '../utils/math-utils';
@use '../utils/property-utils';

@use '../matrix/matrix' as matrix;
@use '../matrix/matrix.global' as *;
@use 'euler.global' as *;

/**
 * Methods
 */

/// Copies the xyz properties of $e into $eul
/// @param {Euler} $eul -
/// @param {Euler} $e -
/// @return {Euler} -
@function copy($eul, $e) {
	$out: ();
	@each $key, $value in $eul {
		$out: map.set($out, $key, map.get($e, $key));
	}

	@return $out;
}

/// Compares the xyz properties of $e to the equivalent properties of $eul to determine if they represent the same rotation
/// @param {Euler} $eul -
/// @param {Euler} $e Euler that $eul will be compared to
/// @return {Boolean} -
@function equals($eul, $e) {
	$out: true;

	@each $key, $value in $eul {
		$out: $out and $value == map.get($e, $key);
	}

	@return $out;
}

/// Sets the angles of $eul transform from a pure rotation matrix based on the orientation 'xyz'
/// @param {Euler} $eul -
/// @param {Matrix4} $matrix A Matrix4 of which the upper 3x3 of the Matrix is a pure rotation Matrix (i.e. unscaled)
/// @return {Euler} -
@function setFromRotationMatrix($eul, $matrix) {
	$m11: list.nth($matrix, 1);
	$m12: list.nth($matrix, 5);
	$m13: list.nth($matrix, 9);
	$m21: list.nth($matrix, 2);
	$m22: list.nth($matrix, 6);
	$m23: list.nth($matrix, 10);
	$m31: list.nth($matrix, 3);
	$m32: list.nth($matrix, 7);
	$m33: list.nth($matrix, 11);

	$out: $eul;

	$out: setY($out, math.asin(sassy-clamp($m13, -1, 1)));

	@if (math.abs($m13) < 0.9999999) {
		$out: setX($out, math.atan2($m23, $m33));
		$out: setZ($out, math.atan2($m12, $m11));
	} @else {
		$out: setX($out, math.atan2($m32, $m22));
		$out: setZ($out, 0);
	}

	@return $out;
}

/// Sets the angles of $eul transform from a normalized Quaternion based on the orientation 'xyz'
/// @param {Euler} $eul -
/// @param {Quaternion} $quaternion A normalized Quaternion
/// @return {Euler} -
@function setFromQuaternion($eul, $quaternion) {
	@return setFromRotationMatrix(
		quaternion(),
		matrix.makeRotationFromQuaternion(matrix4(), $quaternion)
	);
}

/// Set the xyz of $eul to match the xyz of $vec based on the orientation 'xyz'
/// @param {Euler} $eul -
/// @param {Vector3} $vec -
/// @return {Euler} -
@function setFromVector3($eul, $vec) {
	@return euler(x($vec), y($vec), z($vec));
}
