@use 'sass:map';
@use 'sass:math';

@use '../../utils/math-utils';
@use '../../utils/property-utils';

@use 'quaternion.global' as *;

/**
 * Methods
 */

/// Computes the angle between $quat and $q in radians
/// @param {Quaternion} $quat -
/// @param {Quaternion} $q -
/// @return {Number} -
@function angleTo($quat, $q) {
	@return 2 * math.acos(math.abs(sassy-clamp(dot($quat, $q), -1, 1)));
}

/// Computes the rotational conjugate of $quat.
/// The conjugate of a Quaternion represents the same rotation in the opposite direction about the rotational axis
/// @param {Quaternion} $quat -
/// @return {Quaternion} -
@function conjugate($quat) {
	@return quaternion(x($quat) * -1, y($quat) * -1, z($quat) * -1, w($quat));
}

/// Copies the x, y, z and w properties of $q into $quat
/// @param {Quaternion} $quat -
/// @param {Quaternion} $q -
/// @return {Quaternion} -
@function copy($quat, $q) {
	$out: ();
	@each $key, $value in $quat {
		$out: map.set($out, $key, map.get($q, $key));
	}

	@return $out;
}

/// Compares the x, y, z and w properties of $q to the equivalent properties of $quat to determine if they represent the same rotation
/// @param {Quaternion} $quat -
/// @param {Quaternion} $q Quaternion that $quat will be compared to
/// @return {Boolean} -
@function equals($quat, $q) {
	$out: true;

	@each $key, $value in $quat {
		$out: $out and $value == map.get($q, $key);
	}

	@return $out;
}

/// Computes the dot product of Quaternions $q and $quat
/// @param {Quaternion} $quat -
/// @param {Quaternion} $q -
/// @return {Number} -
@function dot($quat, $q) {
	$out: 0;
	@each $key, $value in $quat {
		$out: $out + $value * map.get($q, $key);
	}

	@return $out;
}

/// Sets $quat to the identity Quaternion; that is, to the Quaternion that represents "no rotation"
/// @param {Quaternion} $quat -
/// @return {Quaternion} -
@function identity($quat) {
	@return quaternion(0, 0, 0, 1);
}

/// Inverts $quat - calculates the conjugate. The Quaternion is assumed to have unit length
/// @param {Quaternion} $quat -
/// @return {Quaternion} -
@function invert($quat) {
	@return conjugate($quat);
}

/// Computes the Euclidean length (straight-line length) of $quat, considered as a 4 dimensional vector
/// @param {Quaternion} $quat -
/// @return {Number} -
@function length($quat) {
	$out: 0;
	@each $key, $value in $quat {
		$out: $out + $value * $value;
	}

	@return math.sqrt($out);
}

/// Computes the squared Euclidean length (straight-line length) of $quat, considered as a 4 dimensional vector
/// @param {Quaternion} $quat -
/// @return {Number} -
@function lengthSq($quat) {
	$out: 0;
	@each $key, $value in $quat {
		$out: $out + $value * $value;
	}

	@return $out;
}

/// Normalizes $quat - that is, calculated the Quaternion that performs the same rotation as $quat, but has length equal to 1
/// @param {Quaternion} $quat -
/// @return {Quaternion} -
@function normalize($quat) {
	$l: length($quat);

	@if ($l == 0) {
		@return quaternion(0, 0, 0, 1);
	} @else {
		$l: math.div(1, $l);

		@return quaternion(x($quat) * l, y($quat) * l, z($quat) * l, w($quat) * l);
	}
}

/// Multiplies $quat by $q
/// @param {Quaternion} $quat -
/// @param {Quaternion} $q -
/// @return {Quaternion} -
@function multiply($quat, $q) {
	@return quaternion(
		x($quat) * w($q) + w($quat) * x($q) + y($quat) * z($q) - z($quat) * y($q),
		y($quat) * w($q) + w($quat) * y($q) + z($quat) * x($q) - x($quat) * z($q),
		z($quat) * w($q) + w($quat) * z($q) + x($quat) * y($q) - y($quat) * x($q),
		w($quat) * w($q) + x($quat) * x($q) + y($quat) * y($q) - z($quat) * z($q)
	);
}

/// Pre-multiplies $quat by $q
/// @param {Quaternion} $quat -
/// @param {Quaternion} $q -
/// @return {Quaternion} -
@function premultiply($quat, $q) {
	@return multiply($q, $quat);
}

/// Gets a uniformly random, normalized Quaternion
/// @return {Quaternion} -
@function random() {
	$u1: math.random();

	$sqrt1u1: math.sqrt(1 - $u1);
	$sqrtu1: math.sqrt($u1);

	$u2: 2 * math.$pi * math.random();
	$u3: 2 * math.$pi * math.random();

	@return quaternion(
		$sqrt1u1 * math.cos($u2),
		$sqrtu1 * math.sin($u3),
		$sqrtu1 * math.cos($u3),
		$sqrt1u1 * math.sin($u2)
	);
}

/// Rotates $quat by a given angular step $step to the defined Quaternion $q
/// The method ensures that the final Quaternion will not overshoot $q
/// @param {Quaternion} $quat -
/// @param {Quaternion} $q -
/// @param {Number} $step -
/// @return {Quaternion} -
@function rotateTowards($quat, $q, $step) {
	$angle: angleTo($quat, $q);

	@if ($angle == 0) {
		@return $quat;
	}

	$t: math.min(1, math.div($step, $angle));

	@return slerp($quat, $q, $t);
}

/// Computes the spherical linear interpolation between Quaternions
/// $t represents the amount of rotation between this Quaternion (where $t is 0) and $q (where $t is 1)
/// @param {Quaternion} $quat -
/// @param {Quaternion} $q The other Quaternion rotation
/// @param {Number} $t Interpolation factor in the closed interval [0, 1]
/// @return {Quaternion} -
@function slerp($quat, $q, $t) {
	@if ($t == 0) {
		@return $quat;
	}
	@if ($t == 1) {
		@return $q;
	}

	$x: x($quat);
	$y: y($quat);
	$z: z($quat);
	$w: w($quat);

	$cosHalfTheta: $w * w($q) + $x * x($q) + $y * y($q) + $z * z($q);

	@if ($cosHalfTheta < 0) {
		$quat: setW($quat, -w($q));
		$quat: setX($quat, -x($q));
		$quat: setY($quat, -y($q));
		$quat: setZ($quat, -z($q));

		$cosHalfTheta: -$cosHalfTheta;
	} @else {
		$quat: $q;
	}

	@if ($cosHalfTheta >= 1) {
		@return quaternion($x, $y, $z, $w);
	}

	$sqrtSinHalfTheta: 1 - $cosHalfTheta * $cosHalfTheta;

	@if ($sqrtSinHalfTheta <= $epsilon) {
		$s: 1 - $t;

		@return normalize(
			quaternion(
				$s * $x + $t * x($quat),
				$s * $y + $t * y($quat),
				$s * $z + $t * z($quat),
				$s * $w + $t * w($quat)
			)
		);
	}

	$sinHalfTheta: math.sqrt($sqrtSinHalfTheta);
	$halfTheta: math.atan2($sinHalfTheta, $cosHalfTheta);
	$ratioA: math.div(math.sin((1 - $t) * $halfTheta), $sinHalfTheta);
	$ratioB: math.div(math.sin($t * $halfTheta), $sinHalfTheta);

	@return quaternion(
		$x * $ratioA + x($quat) * $ratioB,
		$y * $ratioA + y($quat) * $ratioB,
		$z * $ratioA + z($quat) * $ratioB,
		$w * $ratioA + w($quat) * $ratioB
	);
}

/// Sets $quat from rotation specified by $axis and $angle
/// @param {Quaternion} $quat -
/// @param {Vector3} $axis Normalised axis
/// @param {Number} $angle Angle in radians
/// @return {Quaternion} -
@function setFromAxisAngle($quat, $axis, $angle) {
	$halfAngle: math.div($angle, 2);
	$s: math.sin($halfAngle);

	@return quaternion(x($axis) * $s, y($axis) * $s, z($axis) * $s, math.cos($halfAngle));
}

//// Sets $quat from the rotation specified by $euler
/// @param {Quaternion} $quat -
/// @param {Euler} $euler - rotation euler based on the orientation 'xyz'
/// @return {Quaternion} -
@function setFromEuler($quat, $euler) {
	$c1: math.cos(math.div($x, 2));
	$c2: math.cos(math.div($y, 2));
	$c3: math.cos(math.div($z, 2));

	$s1: math.sin(math.div($x, 2));
	$s2: math.sin(math.div($y, 2));
	$s3: math.sin(math.div($z, 2));

	$out: $quat;

	$out: setX($s1 * $c2 * $c3 + $c1 * $s2 * $s3);
	$out: setY($c1 * $s2 * $c3 - $s1 * $c2 * $s3);
	$out: setZ($c1 * $c2 * $s3 + $s1 * $s2 * $c3);
	$out: setW($c1 * $c2 * $c3 - $s1 * $s2 * $s3);

	@return $out;
}

/// Sets $quat from rotation component of $matrix
/// @param {Quaternion} $quat -
/// @param {Matrix4} $matrix A Matrix4 of which the upper 3x3 of the Matrix is a pure rotation Matrix (i.e. unscaled)
/// @return {Quaternion} -
@function setFromRotationMatrix($quat, $matrix) {
	$m11: list.nth($matrix, 1);
	$m12: list.nth($matrix, 5);
	$m13: list.nth($matrix, 9);
	$m21: list.nth($matrix, 2);
	$m22: list.nth($matrix, 6);
	$m23: list.nth($matrix, 10);
	$m31: list.nth($matrix, 3);
	$m32: list.nth($matrix, 7);
	$m33: list.nth($matrix, 11);

	$trace: $m11 + $m22 + $m33;

	$out: $quat;

	@if ($trace > 0) {
		$s: math.div(0.5, math.sqrt($trace + 1));

		$out: setW($out, math.div(0.25, $s));
		$out: setX(($m32 - $m23) * $s);
		$out: setY(($m13 - $m31) * $s);
		$out: setZ(($m21 - $m12) * $s);
	} @else if ($m11 > $m22 and $m11 > $m33) {
		$s: 2 * math.sqrt(1 + $m11 - $m22 - $m33);

		$out: setW(($m32 - $m23) / $s);
		$out: setX(0.25 * $s);
		$out: setY(($m12 + $m21) / $s);
		$out: setZ(($m13 + $m31) / $s);
	} @else if ($m22 > $m33) {
		$s: 2 * math.sqrt(1 + $m22 - $m11 - $m33);

		$out: setW(($m13 - $m31) / $s);
		$out: setX(($m12 + $m21) / $s);
		$out: setY(0.25 * $s);
		$out: setZ(($m23 + $m32) / $s);
	} @else {
		$s: 2 * math.sqrt(1 + $m33 - $m11 - $m22);

		$out: setW(($m21 - $m12) / $s);
		$out: setX(($m13 + $m31) / $s);
		$out: setY(($m23 + $m32) / $s);
		$out: setZ(0.25 * $s);
	}

	@return $out;
}

/// Sets $quat to the rotation required to rotate direction Vector3 $vFrom to direction Vector3 $vTo
/// @param {Quaternion} $quat -
/// @param {Vector3} $vFrom Normalised Vector3
/// @param {Vector3} $vTo Normalised Vector3
/// @return {Quaternion} -
@function setFromUnitVectors($quat, $vFrom, $vTo) {
	$out: $quat;

	$r: dot($vFrom, $vTo) + 1;

	@if ($r < $epsilon) {
		// vFrom and vTo point in opposite directions

		$r: 0;

		@if (math.abs(x($vFrom)) > math.abs(z($vFrom))) {
			$out: quaternion(-y($vFrom), x($vFrom), 0, $r);
		} @else {
			$out: quaternion(0, -z($vFrom), y($vFrom), $r);
		}
	} @else {
		$out: quaternion(
			y($vFrom) * z($vTo) - z($vFrom) * y($vTo),
			z($vFrom) * x($vTo) - x($vFrom) * z($vTo),
			x($vFrom) * y($vTo) - y($vFrom) * x($vTo),
			$r
		);
	}

	@return normalize($out);
}
